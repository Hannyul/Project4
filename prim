/*
 Group Members:
 Algorithms and Data Structures
 Section CH 
 Project 3 - Part 2 - Prim's Algorithm 
 */
package prim;

/**
 *
 * @author Beshoo
 */
public class Prim {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        final int INF = 10000;

        int[][] Matrix = {
            // A  B   C    D    E    F    G   H   I
            // a
            {INF, 4, INF, INF, INF, INF, INF, 8, INF},
            // b
            {4, INF, 8, INF, INF, INF, INF, 11, INF},
            // c
            {INF, 8, INF, 7, INF, 4, INF, INF, 2},
            // d
            {INF, INF, 7, INF, 9, 14, INF, INF, INF},
            // e
            {INF, INF, INF, 9, INF, 10, INF, INF, INF},
            // f
            {INF, INF, 4, 14, 10, INF, 2, INF, INF},
            // g 
            {INF, INF, INF, INF, INF, 2, INF, 1, 6},
            // h
            {8, 11, INF, INF, INF, INF, 1, INF, 7},
            // i
            {INF, INF, 2, INF, INF, INF, 6, 7, INF}};

        int source = 0;
        Vertex[][] minST = Prim(Matrix, INF, source);
        print(minST);
    } // main 
    
//***********************************************
    
    public static Vertex[][] Prim(int[][] Matrix, int INF, int source) {
        int[] visited = new int[Matrix.length];
        visited[0] = 1;
        int parentIndex = source;
        int fringeIndex = source;
        int totalCost = 0;
        int smallestCost = 0;
        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
        // letters
        char[] labels = new char[Matrix.length];
        
        // initilize the letters array with the matrix length 
        for (int i = 0; i < Matrix.length; i++) {
            labels[i] = alphabet[i];
        }
        
        // minimum weight for each vertex
        Vertex[][] minST = new Vertex[Matrix.length][2];

        System.out.println("The edges are: ");
        // a MST with <Matrix.length> nodes 
        // will have E=V-1
        int edge = Matrix.length-1;
        for (int i = 0; i <edge; i++) {
            smallestCost = INF;
            for (int j = 0; j < Matrix.length; j++) {
                // parent
                if (visited[j] == 1) {
                    for (int k = 0; k < Matrix.length; k++) {
                        // fringe
                        if (visited[k] != 1) {
                            if (smallestCost > Matrix[j][k]) {
                                smallestCost = Matrix[j][k];
                                parentIndex = j;
                                fringeIndex = k;
                            }
                        }
                    }
                }
            }
            visited[fringeIndex] = 1;

            // before adding any vertex to the heap, check if it already exists:
            Vertex Parent = new Vertex();
            // location of the parent 
            Parent.index = parentIndex;
            // the letter of the parent 
            Parent.label = labels[parentIndex];
         

            // collect the total weight of the mini spanning tree
           // totalCost += smallestCost;

            Vertex Fringe = new Vertex();
            Fringe.index = fringeIndex;
            Fringe.label = labels[fringeIndex];
            Fringe.weight = smallestCost;

            // prints ab = 4;
//            minHeap[fringeIndex][0] = Parent;
//            minHeap[fringeIndex][1] = Fringe;
            // prints sorted:
            //
            minST[i][0] = Parent;
            minST[i][1] = Fringe;
    }
       
        return minST;
    }
    
    // *********************************

    public static void print(Vertex[][] minST) {
        int total = 0;
        //rows:
        for (int i = 0; i < minST.length; i++) {

            if (minST[i][0] != null) {
                System.out.print("(" + minST[i][0].getLabel() + "," + minST[i][1].getLabel() + ") " + " with the cost of " + minST[i][1].weight + "\n");
                total += minST[i][1].weight;

            }

        }

        System.out.println("The minimum weight is: " + total);
    }
}
