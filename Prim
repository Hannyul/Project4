/*
 Group Members:
 Algorithms and Data Structures
 Section CH 
 Project 4 - Prim's Algorithm 
 */
package prim;

/**
 *
 * @author Beshoo
 */
public class Prim {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        final int INF = 10000;

        int[][] Matrix = {{INF, 4, INF, INF, INF, INF, INF, 8, INF},
        {4, INF, 8, INF, INF, INF, INF, 11, INF},
        {INF, 8, INF, 7, INF, 4, INF, INF, 2},
        {INF, INF, 7, INF, 9, 14, INF, INF, INF},
        {INF, INF, INF, 9, INF, 10, INF, INF, INF},
        {INF, INF, 4, 14, 10, INF, 2, INF, INF},
        {INF, INF, INF, INF, INF, 2, INF, 1, 6},
        {8, 11, INF, INF, INF, INF, 1, INF, 7},
        {INF, INF, 2, INF, INF, INF, 6, 7, INF}};

        int source = 0;
        Prim(Matrix, INF, source);
    }

    public static void Prim(int[][] Matrix, int INF, int source) {
        int[] visited = new int[Matrix.length];
        visited[0] = 1;
        int headNode = 0;
        int tailNode = 0;
        int totalCost = 0;
        int smallestCost = 0;
        System.out.println("The edges are: ");
        // a MST with <Matrix.length> nodes 
        // will have <Matrix.length - 1> edges
        for (int i = 0; i < Matrix.length - 1; i++) {
            smallestCost = INF;
            for (int j = 0; j < Matrix.length; j++) {
                if (visited[j] == 1) {
                    for (int k = 0; k < Matrix.length; k++) {
                        if (visited[k] != 1) {
                            if (smallestCost > Matrix[j][k]) {
                                smallestCost = Matrix[j][k];
                                headNode = j;
                                // vertex:
                                tailNode = k;
                            }
                        }
                    }
                }
            }
            visited[tailNode] = 1;
            totalCost += smallestCost;
            System.out.print("("+headNode + "," + tailNode + ") " + "\n");

        }
        System.out.println("");
        System.out.println("The minimum weight is: " + totalCost);
    }
}
